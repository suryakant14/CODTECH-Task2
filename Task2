/* Create a simple vulnerability scanning tool that scans a network or website for common security vulnerabilities such as open ports, outdated software versions, and misconfigurations.*/

import socket
import requests
import tkinter as tk
from tkinter import scrolledtext

def scan_open_ports(target, ports):
    """Scan for open ports"""
    open_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.setdefaulttimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    return open_ports

def check_http_headers(url):
    """Check HTTP headers"""
    headers = []
    try:
        response = requests.get(url, timeout=5)
        headers = response.headers
    except requests.RequestException as e:
        print(f"Error fetching HTTP headers: {e}")
    return headers

def check_outdated_software(headers):
    """Check for outdated software"""
    outdated = []
    server = headers.get('Server', '')
    if 'Apache' in server:
        version = server.split(' ')[1] if len(server.split(' ')) > 1 else ''
        if version and version < '2.4.51':
            outdated.append(f"Apache version {version} is outdated.")
    elif 'nginx' in server:
        version = server.split('/')[1] if len(server.split('/')) > 1 else ''
        if version and version < '1.21.4':
            outdated.append(f"nginx version {version} is outdated.")
    return outdated

def check_misconfigurations(headers):
    """Check for potential misconfigurations"""
    issues = []
    if 'X-Frame-Options' not in headers:
        issues.append("X-Frame-Options header is missing.")
    if 'X-Content-Type-Options' not in headers:
        issues.append("X-Content-Type-Options header is missing.")
    if 'Content-Security-Policy' not in headers:
        issues.append("Content-Security-Policy header is missing.")
    if 'Strict-Transport-Security' not in headers:
        issues.append("Strict-Transport-Security header is missing.")
    return issues

def vulnerability_scan(target):
    """Perform vulnerability scan"""
    result_text.delete(1.0, tk.END)
    result_text.insert(tk.END, f"Scanning {target} for vulnerabilities...\n\n")

    # Scanning for open ports
    ports = [80, 443, 22, 21, 25, 3305]
    open_ports = scan_open_ports(target, ports)
    result_text.insert(tk.END, f"**Open Ports:** {open_ports}\n\n")

    # Checking HTTP headers and software versions
    url = f"http://{target}"
    headers = check_http_headers(url)
    if headers:
        result_text.insert(tk.END, f"**HTTP Headers:** {headers}\n\n")
        outdated_software = check_outdated_software(headers)
        if outdated_software:
            result_text.insert(tk.END, "**Outdated Software Detected:**\n")
            for issue in outdated_software:
                result_text.insert(tk.END, f"- {issue}\n")
            result_text.insert(tk.END, "\n")
        else:
            result_text.insert(tk.END, "**No Outdated Software Detected.**\n\n")

        misconfigurations = check_misconfigurations(headers)
        if misconfigurations:
            result_text.insert(tk.END, "**Potential Misconfigurations Detected:**\n")
            for issue in misconfigurations:
                result_text.insert(tk.END, f"- {issue}\n")
            result_text.insert(tk.END, "\n")
        else:
            result_text.insert(tk.END, "**No Misconfigurations Detected.**\n\n")
    else:
        result_text.insert(tk.END, "**Could not retrieve HTTP headers.**\n\n")

def start_scan():
    """Start the vulnerability scan"""
    target = target_entry.get()
    vulnerability_scan(target)

root = tk.Tk()
root.title("Vulnerability Scanning Tool")

# Set background color
root.configure(background='#f0f0f0')

target_label = tk.Label(root, text="Enter the Target (IP address or Domain):", bg='#f0f0f0', fg='#00698f')
target_label.pack()

target_entry = tk.Entry(root, width=50, bg='#ffffff', fg='#000000')
target_entry.pack()

scan_button = tk.Button(root, text="Start Scan", command=start_scan, bg='#00698f', fg='#ffffff')
scan_button.pack()

result_text = scrolledtext.ScrolledText(root, width=100, height=30, bg='#ffffff', fg='#000000')
result_text.pack()

root.mainloop()
